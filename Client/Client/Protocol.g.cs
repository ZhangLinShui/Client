// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Xiuxian.Zhangmen.Road {

  #region Enums
  public enum Command {
    /// <summary>
    ///心跳
    /// </summary>
    CmdHeartbeat = 0,
    /// <summary>
    ///登录
    /// </summary>
    CmdLogin = 1,
    /// <summary>
    ///登出
    /// </summary>
    CmdLogout = 2,
    /// <summary>
    ///通知客户端被踢出
    /// </summary>
    CmdKickOff = 3,
    /// <summary>
    ///作弊报告
    /// </summary>
    CmdCheatReport = 4,
    /// <summary>
    ///获取道具
    /// </summary>
    CmdGetProp = 100001,
    /// <summary>
    ///保存道具
    /// </summary>
    CmdSaveProp = 100002,
    /// <summary>
    ///获取庚金谷
    /// </summary>
    CmdGetGjg = 100003,
    /// <summary>
    ///保存庚金谷
    /// </summary>
    CmdSaveGjg = 100004,
    /// <summary>
    ///获取药园
    /// </summary>
    CmdGetYy = 100005,
    /// <summary>
    ///保存药园
    /// </summary>
    CmdSaveYy = 100006,
    /// <summary>
    ///获取炼丹房
    /// </summary>
    CmdGetLdf = 100007,
    /// <summary>
    ///保存炼丹房
    /// </summary>
    CmdSaveLdf = 100008,
    /// <summary>
    ///获取炼器房
    /// </summary>
    CmdGetLqf = 100009,
    /// <summary>
    ///保存炼器房
    /// </summary>
    CmdSaveLqf = 100010,
    /// <summary>
    ///获取正殿
    /// </summary>
    CmdGetMainHall = 100011,
    /// <summary>
    ///保存正殿
    /// </summary>
    CmdSaveMainHall = 100012,
    /// <summary>
    ///获取招募建筑
    /// </summary>
    CmdGetRecruitHall = 100013,
    /// <summary>
    ///保存招募建筑
    /// </summary>
    CmdSaveRecruitHall = 100014,
    /// <summary>
    ///获取聚灵阵
    /// </summary>
    CmdGetJvlingHall = 100015,
    /// <summary>
    ///保存聚灵阵
    /// </summary>
    CmdSaveJvlingHall = 100016,
    /// <summary>
    ///获取护山大阵
    /// </summary>
    CmdGetHushanHall = 100017,
    /// <summary>
    ///保存护山大阵
    /// </summary>
    CmdSaveHushanHall = 100018,
    /// <summary>
    ///获取仓库
    /// </summary>
    CmdGetStoreHouse = 100019,
    /// <summary>
    ///保存仓库
    /// </summary>
    CmdSaveStoreHouse = 100020,
    /// <summary>
    ///获取芥子环
    /// </summary>
    CmdGetJzh = 100021,
    /// <summary>
    ///保存芥子环
    /// </summary>
    CmdSaveJzh = 100022,
    /// <summary>
    ///获取弟子
    /// </summary>
    CmdGetRole = 100023,
    /// <summary>
    ///保存弟子详细信息
    /// </summary>
    CmdSaveRoleDetail = 100024,
    /// <summary>
    ///保存弟子简要信息(等级/经验/...)
    /// </summary>
    CmdSaveRoleBrief = 100025,
  }

  public enum LoginType {
    /// <summary>
    ///游客登录
    /// </summary>
    GuestLogin = 0,
  }

  public enum Sex {
    Unknown = 0,
    Man = 1,
    Woman = 2,
  }

  public enum Result {
    Success = 0,
    Fail = 1,
    /// <summary>
    ///同一帐号异地登录
    /// </summary>
    AnotherLogin = 100,
  }

  public enum ReasonId {
    SourceUnknown = 0,
    /// <summary>
    ///PVE战斗产出
    /// </summary>
    SourceFightPve = 1,
    /// <summary>
    ///PVP战斗产出
    /// </summary>
    SourceFightPvp = 2,
  }

  public enum BuildingId {
    BuildingUnknown = 0,
    /// <summary>
    ///庚金谷
    /// </summary>
    BuildingGjg = 1,
    /// <summary>
    ///药园
    /// </summary>
    BuildingYy = 2,
    /// <summary>
    ///炼丹房
    /// </summary>
    BuildingLdf = 3,
    /// <summary>
    ///炼器房
    /// </summary>
    BuildingLqf = 4,
    /// <summary>
    ///正殿
    /// </summary>
    BuildingMainHall = 5,
    /// <summary>
    ///副殿
    /// </summary>
    BuildingDeputyHall = 6,
    /// <summary>
    ///偏殿
    /// </summary>
    BuildingPartialHall = 7,
    /// <summary>
    ///招募建筑
    /// </summary>
    BuildingRecruitHall = 8,
    /// <summary>
    ///聚灵阵
    /// </summary>
    BuildingJvlingHall = 9,
    /// <summary>
    ///护山大阵
    /// </summary>
    BuildingHushanHall = 10,
    /// <summary>
    ///出发建筑
    /// </summary>
    BuildingGoingHall = 11,
    /// <summary>
    ///出发建筑
    /// </summary>
    BuildingStoreHouse = 12,
    /// <summary>
    ///出发建筑
    /// </summary>
    BuildingJzh = 13,
  }

  #endregion

  #region Messages
  public sealed class Packet : pb::IMessage {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::Xiuxian.Zhangmen.Road.Command command_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xiuxian.Zhangmen.Road.Command Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    /// <summary>
    ///上行和主动下行时不设置，被动下行时设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    /// <summary>
    ///被动下行且result不为RESULT_SUCCESS时设置，否则不设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 4;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ///根据command对应具体结构
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::Xiuxian.Zhangmen.Road.Command) input.ReadEnum();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
          case 34: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户信息
  /// </summary>
  public sealed class UserInfo : pb::IMessage {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 4;
    private global::Xiuxian.Zhangmen.Road.Sex sex_ = 0;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xiuxian.Zhangmen.Road.Sex Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "rmb" field.</summary>
    public const int RmbFieldNumber = 5;
    private int rmb_;
    /// <summary>
    ///钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rmb {
      get { return rmb_; }
      set {
        rmb_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 6;
    private int gold_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "heartbeat_time" field.</summary>
    public const int HeartbeatTimeFieldNumber = 7;
    private int heartbeatTime_;
    /// <summary>
    ///心跳时间戳(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeartbeatTime {
      get { return heartbeatTime_; }
      set {
        heartbeatTime_ = value;
      }
    }

    /// <summary>Field number for the "offline_time" field.</summary>
    public const int OfflineTimeFieldNumber = 8;
    private int offlineTime_;
    /// <summary>
    ///离线时间戳(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OfflineTime {
      get { return offlineTime_; }
      set {
        offlineTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (Sex != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Sex);
      }
      if (Rmb != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rmb);
      }
      if (Gold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Gold);
      }
      if (HeartbeatTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HeartbeatTime);
      }
      if (OfflineTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OfflineTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sex);
      }
      if (Rmb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rmb);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (HeartbeatTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeartbeatTime);
      }
      if (OfflineTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfflineTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 32: {
            sex_ = (global::Xiuxian.Zhangmen.Road.Sex) input.ReadEnum();
            break;
          }
          case 40: {
            Rmb = input.ReadInt32();
            break;
          }
          case 48: {
            Gold = input.ReadInt32();
            break;
          }
          case 56: {
            HeartbeatTime = input.ReadInt32();
            break;
          }
          case 64: {
            OfflineTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///心跳，CMD_HEARTBEAT
  ///客户端每30秒发送一次
  ///服务端原包返回
  ///上行body：
  /// </summary>
  public sealed class ReqHeartbeat : pb::IMessage {
    private static readonly pb::MessageParser<ReqHeartbeat> _parser = new pb::MessageParser<ReqHeartbeat>(() => new ReqHeartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeartbeat> Parser { get { return _parser; } }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private int timestamp_;
    /// <summary>
    ///时间戳(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录，CMD_LOGIN
  ///上行body：
  /// </summary>
  public sealed class ReqLogin : pb::IMessage {
    private static readonly pb::MessageParser<ReqLogin> _parser = new pb::MessageParser<ReqLogin>(() => new ReqLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLogin> Parser { get { return _parser; } }

    /// <summary>Field number for the "login_type" field.</summary>
    public const int LoginTypeFieldNumber = 1;
    private global::Xiuxian.Zhangmen.Road.LoginType loginType_ = 0;
    /// <summary>
    ///登录类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xiuxian.Zhangmen.Road.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "third_id" field.</summary>
    public const int ThirdIdFieldNumber = 2;
    private string thirdId_ = "";
    /// <summary>
    ///third_id(游客随机码,token等)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThirdId {
      get { return thirdId_; }
      set {
        thirdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private int channel_;
    /// <summary>
    ///渠道号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "sub_channel" field.</summary>
    public const int SubChannelFieldNumber = 4;
    private int subChannel_;
    /// <summary>
    ///子渠道号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubChannel {
      get { return subChannel_; }
      set {
        subChannel_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private string version_ = "";
    /// <summary>
    ///客户端游戏版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LoginType);
      }
      if (ThirdId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ThirdId);
      }
      if (Channel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Channel);
      }
      if (SubChannel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SubChannel);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (ThirdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThirdId);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (SubChannel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubChannel);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            loginType_ = (global::Xiuxian.Zhangmen.Road.LoginType) input.ReadEnum();
            break;
          }
          case 18: {
            ThirdId = input.ReadString();
            break;
          }
          case 24: {
            Channel = input.ReadInt32();
            break;
          }
          case 32: {
            SubChannel = input.ReadInt32();
            break;
          }
          case 42: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///下行result：
  ///RESULT_SUCCESS
  ///RESULT_FAIL
  ///下行body：
  /// </summary>
  public sealed class AckLogin : pb::IMessage {
    private static readonly pb::MessageParser<AckLogin> _parser = new pb::MessageParser<AckLogin>(() => new AckLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckLogin> Parser { get { return _parser; } }

    /// <summary>Field number for the "login_type" field.</summary>
    public const int LoginTypeFieldNumber = 1;
    private global::Xiuxian.Zhangmen.Road.LoginType loginType_ = 0;
    /// <summary>
    ///登录类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xiuxian.Zhangmen.Road.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private int timestamp_;
    /// <summary>
    ///时间戳(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///TOKEN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_info" field.</summary>
    public const int UserInfoFieldNumber = 4;
    private global::Xiuxian.Zhangmen.Road.UserInfo userInfo_;
    /// <summary>
    ///用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xiuxian.Zhangmen.Road.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LoginType);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            loginType_ = (global::Xiuxian.Zhangmen.Road.LoginType) input.ReadEnum();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            if (userInfo_ == null) {
              userInfo_ = new global::Xiuxian.Zhangmen.Road.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///作弊报告，CMD_CHEAT_REPORT
  ///上行body：
  /// </summary>
  public sealed class CheatReport : pb::IMessage {
    private static readonly pb::MessageParser<CheatReport> _parser = new pb::MessageParser<CheatReport>(() => new CheatReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheatReport> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///作弊类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 2;
    private string memo_ = "";
    /// <summary>
    ///作弊信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Memo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class PropInfo : pb::IMessage {
    private static readonly pb::MessageParser<PropInfo> _parser = new pb::MessageParser<PropInfo>(() => new PropInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    /// <summary>
    ///道具id(0表示新增)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    ///材料id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 3;
    private int quantity_;
    /// <summary>
    ///数量(小于0表示删除)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "attrib" field.</summary>
    public const int AttribFieldNumber = 4;
    private string attrib_ = "";
    /// <summary>
    ///属性(json)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attrib {
      get { return attrib_; }
      set {
        attrib_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (Quantity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Quantity);
      }
      if (Attrib.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Attrib);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (Attrib.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attrib);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            Quantity = input.ReadInt32();
            break;
          }
          case 34: {
            Attrib = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取道具，CMD_GET_PROP
  ///上行body：无
  ///下行result：
  ///RESULT_SUCCESS
  ///RESULT_FAIL
  ///下行body：
  /// </summary>
  public sealed class AckGetProp : pb::IMessage {
    private static readonly pb::MessageParser<AckGetProp> _parser = new pb::MessageParser<AckGetProp>(() => new AckGetProp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGetProp> Parser { get { return _parser; } }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xiuxian.Zhangmen.Road.PropInfo> _repeated_props_codec
        = pb::FieldCodec.ForMessage(10, global::Xiuxian.Zhangmen.Road.PropInfo.Parser);
    private readonly pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.PropInfo> props_ = new pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.PropInfo>();
    /// <summary>
    ///道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.PropInfo> Props {
      get { return props_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      props_.WriteTo(output, _repeated_props_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += props_.CalculateSize(_repeated_props_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保存道具，CMD_SAVE_PROP
  ///上行body：
  /// </summary>
  public sealed class ReqSaveProp : pb::IMessage {
    private static readonly pb::MessageParser<ReqSaveProp> _parser = new pb::MessageParser<ReqSaveProp>(() => new ReqSaveProp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSaveProp> Parser { get { return _parser; } }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xiuxian.Zhangmen.Road.PropInfo> _repeated_props_codec
        = pb::FieldCodec.ForMessage(10, global::Xiuxian.Zhangmen.Road.PropInfo.Parser);
    private readonly pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.PropInfo> props_ = new pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.PropInfo>();
    /// <summary>
    ///道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.PropInfo> Props {
      get { return props_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      props_.WriteTo(output, _repeated_props_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += props_.CalculateSize(_repeated_props_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///下行result：
  ///RESULT_SUCCESS
  ///RESULT_FAIL
  ///下行body：
  /// </summary>
  public sealed class AckSaveProp : pb::IMessage {
    private static readonly pb::MessageParser<AckSaveProp> _parser = new pb::MessageParser<AckSaveProp>(() => new AckSaveProp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSaveProp> Parser { get { return _parser; } }

    /// <summary>Field number for the "prop_ids" field.</summary>
    public const int PropIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_propIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> propIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///道具id列表(与请求中的道具列表对应)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PropIds {
      get { return propIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      propIds_.WriteTo(output, _repeated_propIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += propIds_.CalculateSize(_repeated_propIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            propIds_.AddEntriesFrom(input, _repeated_propIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///生产线
  /// </summary>
  public sealed class ProductLine : pb::IMessage {
    private static readonly pb::MessageParser<ProductLine> _parser = new pb::MessageParser<ProductLine>(() => new ProductLine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductLine> Parser { get { return _parser; } }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    /// <summary>
    ///生产线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 2;
    private int lv_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 3;
    private int power_;
    /// <summary>
    ///生产力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (Lv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lv);
      }
      if (Power != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Power);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            Lv = input.ReadInt32();
            break;
          }
          case 24: {
            Power = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取庚金谷，CMD_GET_GJG
  ///获取药园，  CMD_GET_YY
  ///上行body：无
  ///下行result：
  ///RESULT_SUCCESS
  ///RESULT_FAIL
  ///下行body：
  /// </summary>
  public sealed class BuildingProductInfo : pb::IMessage {
    private static readonly pb::MessageParser<BuildingProductInfo> _parser = new pb::MessageParser<BuildingProductInfo>(() => new BuildingProductInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingProductInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 1;
    private int lv_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "last_product_time" field.</summary>
    public const int LastProductTimeFieldNumber = 2;
    private int lastProductTime_;
    /// <summary>
    ///最后生产时间(时间戳:秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastProductTime {
      get { return lastProductTime_; }
      set {
        lastProductTime_ = value;
      }
    }

    /// <summary>Field number for the "product_lines" field.</summary>
    public const int ProductLinesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xiuxian.Zhangmen.Road.ProductLine> _repeated_productLines_codec
        = pb::FieldCodec.ForMessage(26, global::Xiuxian.Zhangmen.Road.ProductLine.Parser);
    private readonly pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.ProductLine> productLines_ = new pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.ProductLine>();
    /// <summary>
    ///生产线列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.ProductLine> ProductLines {
      get { return productLines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Lv);
      }
      if (LastProductTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastProductTime);
      }
      productLines_.WriteTo(output, _repeated_productLines_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (LastProductTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastProductTime);
      }
      size += productLines_.CalculateSize(_repeated_productLines_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Lv = input.ReadInt32();
            break;
          }
          case 16: {
            LastProductTime = input.ReadInt32();
            break;
          }
          case 26: {
            productLines_.AddEntriesFrom(input, _repeated_productLines_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取炼丹房，CMD_GET_LDF
  ///获取炼器房，CMD_GET_LQF
  ///上行body：无
  ///下行result：
  ///RESULT_SUCCESS
  ///RESULT_FAIL
  ///下行body：
  /// </summary>
  public sealed class BuildingCommonInfo : pb::IMessage {
    private static readonly pb::MessageParser<BuildingCommonInfo> _parser = new pb::MessageParser<BuildingCommonInfo>(() => new BuildingCommonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingCommonInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 1;
    private int lv_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "ex_info" field.</summary>
    public const int ExInfoFieldNumber = 2;
    private string exInfo_ = "";
    /// <summary>
    ///扩展信息(json)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExInfo {
      get { return exInfo_; }
      set {
        exInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Lv);
      }
      if (ExInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (ExInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Lv = input.ReadInt32();
            break;
          }
          case 18: {
            ExInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleBrief : pb::IMessage {
    private static readonly pb::MessageParser<RoleBrief> _parser = new pb::MessageParser<RoleBrief>(() => new RoleBrief());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBrief> Parser { get { return _parser; } }

    /// <summary>Field number for the "dizi_id" field.</summary>
    public const int DiziIdFieldNumber = 1;
    private int diziId_;
    /// <summary>
    ///弟子id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiziId {
      get { return diziId_; }
      set {
        diziId_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 3;
    private int lv_;
    /// <summary>
    ///等级(小于0表示删除)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    /// <summary>
    ///经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiziId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DiziId);
      }
      if (Lv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Lv);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiziId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiziId);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DiziId = input.ReadInt32();
            break;
          }
          case 24: {
            Lv = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleDetail : pb::IMessage {
    private static readonly pb::MessageParser<RoleDetail> _parser = new pb::MessageParser<RoleDetail>(() => new RoleDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "dizi_id" field.</summary>
    public const int DiziIdFieldNumber = 1;
    private int diziId_;
    /// <summary>
    ///弟子id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiziId {
      get { return diziId_; }
      set {
        diziId_ = value;
      }
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private int roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 3;
    private int lv_;
    /// <summary>
    ///等级(小于0表示删除)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    /// <summary>
    ///经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "attrib" field.</summary>
    public const int AttribFieldNumber = 5;
    private string attrib_ = "";
    /// <summary>
    ///属性(json)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attrib {
      get { return attrib_; }
      set {
        attrib_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiziId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DiziId);
      }
      if (RoleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoleId);
      }
      if (Lv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Lv);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      if (Attrib.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Attrib);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiziId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiziId);
      }
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Attrib.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attrib);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DiziId = input.ReadInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadInt32();
            break;
          }
          case 24: {
            Lv = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 42: {
            Attrib = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取弟子，CMD_GET_ROLE
  ///上行body：无
  ///下行result：
  ///RESULT_SUCCESS
  ///RESULT_FAIL
  ///下行body：
  /// </summary>
  public sealed class AckGetRole : pb::IMessage {
    private static readonly pb::MessageParser<AckGetRole> _parser = new pb::MessageParser<AckGetRole>(() => new AckGetRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGetRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xiuxian.Zhangmen.Road.RoleDetail> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Xiuxian.Zhangmen.Road.RoleDetail.Parser);
    private readonly pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.RoleDetail> roles_ = new pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.RoleDetail>();
    /// <summary>
    ///弟子列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.RoleDetail> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保存弟子详细信息，CMD_SAVE_ROLE_DETAIL
  ///上行body：
  /// </summary>
  public sealed class ReqSaveRoleDetail : pb::IMessage {
    private static readonly pb::MessageParser<ReqSaveRoleDetail> _parser = new pb::MessageParser<ReqSaveRoleDetail>(() => new ReqSaveRoleDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSaveRoleDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xiuxian.Zhangmen.Road.RoleDetail> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Xiuxian.Zhangmen.Road.RoleDetail.Parser);
    private readonly pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.RoleDetail> roles_ = new pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.RoleDetail>();
    /// <summary>
    ///弟子列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.RoleDetail> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///下行result：
  ///RESULT_SUCCESS
  ///RESULT_FAIL
  ///下行body：无
  /// </summary>
  public sealed class AckSaveRoleDetail : pb::IMessage {
    private static readonly pb::MessageParser<AckSaveRoleDetail> _parser = new pb::MessageParser<AckSaveRoleDetail>(() => new AckSaveRoleDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSaveRoleDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "dizi_ids" field.</summary>
    public const int DiziIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_diziIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> diziIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///弟子id列表(与请求中的弟子列表对应)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DiziIds {
      get { return diziIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      diziIds_.WriteTo(output, _repeated_diziIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += diziIds_.CalculateSize(_repeated_diziIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            diziIds_.AddEntriesFrom(input, _repeated_diziIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保存弟子简要信息(等级/经验/...)，CMD_SAVE_ROLE_BRIEF
  ///上行body：
  /// </summary>
  public sealed class ReqSaveRoleBrief : pb::IMessage {
    private static readonly pb::MessageParser<ReqSaveRoleBrief> _parser = new pb::MessageParser<ReqSaveRoleBrief>(() => new ReqSaveRoleBrief());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSaveRoleBrief> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xiuxian.Zhangmen.Road.RoleBrief> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Xiuxian.Zhangmen.Road.RoleBrief.Parser);
    private readonly pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.RoleBrief> roles_ = new pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.RoleBrief>();
    /// <summary>
    ///弟子列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xiuxian.Zhangmen.Road.RoleBrief> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
